'''Базовые:'''


def input_int(text='Введите число'):
    while True:
        try:
            num = int(input(f'{text}: '))
        except ValueError:
            print('Введено не верное значение попробуйте снова.')
            continue
        break
    return num


# 1) Поработайте с переменными, создайте несколько, выведите на экран,
# запросите у пользователя несколько чисел и строк и сохраните в переменные,
# выведите на экран.

# a = 5
# b = 'string'
#
# def num_str(a, b):
#     print(f'Заданы переменные: "a" с числовым значением {a} и "b" со строчным'
#           f' значением "{b}"')
#     while True:
#         a = input_int()
#         b = input('Введите новый текст для переменной "b": ')
#         print(b * a)
#         z = input('Введите "q" для выхода или нажмите "Ввод" для повтора: ')
#         if z == 'q':
#             break
#     return a, b
#
#
# print(*num_str(a, b))

# 2) Пользователь вводит время в секундах. Переведите время в часы, минуты и
# секунды и выведите в формате чч:мм:сс. Используйте форматирование строк.

# def hour_minute_second():
#     while True:
#         second = input_int(text='Введите количество секунд')
#         if second < 0:
#             print('Введено отрицательное значение попробуйте снова.')
#             continue
#         break
#     minute = second // 60 % 60
#     hour = second // 60 // 60
#     second %= 60
#     # return hour, minute, second
#     print('%(hour)02d:%(minute)02d:%(second)02d' %
#           {'hour': hour, 'minute': minute, 'second': second})
#
#
# hour_minute_second()

# 3) Узнайте у пользователя число n. Найдите сумму чисел n + nn + nnn.
# Например, пользователь ввёл число 3. Считаем 3 + 33 + 333 = 369.

# n = input_int(text = 'Введите число')
# print(n + int(f'{n}{abs(n)}') + int(f'{n}{abs(n)}{abs(n)}'))

# 4) Пользователь вводит целое положительное число. Найдите самую большую
# цифру в числе. Для решения используйте цикл while и арифметические операции.

# def max_digit_in_number(number):
#     digit = list()
#     while number > 0:
#         digit.append(number % 10)
#         number //= 10
#     return sorted(digit).pop()
#
#
# while True:
#     n = input_int(text = 'Введите целое положительное число')
#     if n < 0:
#         print('Введено отрицательное значение попробуйте снова.')
#         continue
#     break
# print(max_digit_in_number(n))

# 5) Запросите у пользователя значения выручки и издержек фирмы. Определите, с
# каким финансовым результатом работает фирма (прибыль — выручка больше
# издержек, или убыток — издержки больше выручки). Выведите соответствующее
# сообщение. Если фирма отработала с прибылью, вычислите рентабельность
# выручки (соотношение прибыли к выручке). Далее запросите численность
# сотрудников фирмы и определите прибыль фирмы в расчете на одного сотрудника.

# def financial_report():
#     revenue = input_int(text='Введите значение выручки')
#     costs = input_int(text='Введите значение издержек')
#     total = revenue - costs
#     if total > 0:
#         print(f'Прибыль: {total}')
#         print(f'Рентабельность: {total / revenue}')
#         employees = input_int(text='Введите количество сотрудников')
#         print(f'Прибыль на одного сотрудника: {total / employees}')
#     elif total < 0:
#         print(f'Убытки: {-total}')
#     else:
#         print(f'Прибыль и убытки = {total}')
#
#
# financial_report()

# 6) Спортсмен занимается ежедневными пробежками. В первый день его результат
# составил a километров. Каждый день спортсмен увеличивал результат на 10 %
# относительно предыдущего. Требуется определить номер дня, на который
# результат спортсмена составит не менее b километров. Программа должна
# принимать значения параметров a и b и выводить одно натуральное число —
# номер дня.
# Например: a = 2, b = 3.
# Результат:
# 1-й день: 2
# 2-й день: 2,2
# 3-й день: 2,42
# 4-й день: 2,66
# 5-й день: 2,93
# 6-й день: 3,22
# Ответ: на 6-й день спортсмен достиг результата — не менее 3 км.

# def percent_increase():
#     a = input_int(text='Введите результат 1-го дня')
#     b = input_int(text='Введите требуемый результат')
#     day = 1
#     while a < b:
#         a += a * 0.1
#         day += 1
#     print(f'Требуемый результат будет достигнут на {day} день.')
#
#
# percent_increase()

'''Дополнительные:'''

# 7) Напишите программу, которая принимает на вход цифру, обозначающую день
# недели, и проверяет, является ли этот день выходным.
# Пример:
# - 6 -> да
# - 7 -> да
# - 1 -> нет

# while True:
#     digit = input_int(text='Введите день недели')
#     if digit > 7 or digit < 1:
#         print('В неделе 7 дней.')
#         continue
#     break
#
# weekends = {1: 'нет', 2: ' нет', 3: 'нет', 4: 'нет', 5: 'нет', 6: 'да',
#             7: 'да'}
# print(weekends.get(digit))

# 8) Напишите программу для. проверки истинности утверждения
# ¬(X ⋁ Y ⋁ Z) = ¬X ⋀ ¬Y ⋀ ¬Z для всех значений предикат.

# print('¬(X ⋁ Y ⋁ Z) = ¬X ⋀ ¬Y ⋀ ¬Z')
# x, y, z = map(int, input('Введите "X", "Y", "Z" в одну строку, через пробел,'
#                          ' без запятых: ').split())
# # x, y, z = input_int(text='Введите "X"'), input_int(text='Введите "Y"'),\
# #           input_int(text='Введите "Z"')
# print((not (x or y or z)) == (not x and not y and not z))

# 9) Напишите программу, которая принимает на вход координаты точки (X и Y),
# причём X ≠ 0 и Y ≠ 0 и выдаёт номер четверти плоскости, в которой находится
# эта точка (или на какой оси она находится).
# Пример:
# - x=34; y=-30 -> 4
# - x=2; y=4-> 1
# - x=-34; y=-30 -> 3

# x, y = input_int(text='Введите координату "X"'), \
#        input_int(text='Введите координату "Y"')
#
#
# def quarter_plane(x, y):
#     if x > 0 and y > 0:
#         quarter = 1
#     elif x < 0 and y > 0:
#         quarter = 2
#     elif x < 0 and y < 0:
#         quarter = 3
#     elif x > 0 and y < 0:
#         quarter = 4
#     return quarter
#
#
# print(f'Точка находится в {quarter_plane(x, y)} четверти.')

# 10) Напишите программу, которая по заданному номеру четверти, показывает
# диапазон возможных координат точек в этой четверти (x и y).


# while True:
#     quart = input_int(text='Введите номер четверти')
#     if quart > 4 or quart < 1:
#         print('Четверть состоит из 4х частей.')
#         continue
#     break
#
#
# def point_range(quarter):
#     if quarter == 1:
#         print(f'Для четверти {quart} диапазон точек "x > 0, y > 0"')
#     elif quarter == 2:
#         print(f'Для четверти {quart} диапазон точек "x < 0, y > 0"')
#     elif quarter == 3:
#         print(f'Для четверти {quart} диапазон точек "x < 0, y < 0"')
#     elif quarter == 4:
#         print(f'Для четверти {quart} диапазон точек "x > 0, y < 0"')
#
#
# point_range(quart)

# 11) Напишите программу, которая принимает на вход координаты двух точек и
# находит расстояние между ними в 2D пространстве.
# Пример:
# - A (3,6); B (2,1) -> 5,09
# - A (7,-5); B (1,-1) -> 7,21

# point_a = [input_int(text='Введите координату "X" первой точки'),
#            input_int(text='Введите координату "Y" первой точки')]
# point_b = [input_int(text='Введите координату "X" второй точки'),
#            input_int(text='Введите координату "Y" второй точки')]
#
#
# def distance_between_points(point1, point2):
#     result = ((point2[0] - point1[0]) ** 2 +
#               (point2[1] - point1[1]) ** 2) ** 0.5
#     return result
#
#
# print(round(distance_between_points(point_a, point_b), 2))
